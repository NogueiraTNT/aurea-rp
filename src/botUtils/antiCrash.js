module.exports = async (client) => {
  // Trata m√∫ltiplas resolu√ß√µes de promessas
  process.on("multipleResolves", (type, promise, reason) => {
    console.log(
      `üö® | [Multiple Resolves] Tipo: ${type}\nPromessa: ${promise}\nRaz√£o: ${reason}`
    );
  });

  // Trata rejei√ß√µes n√£o tratadas
  process.on("unhandledRejection", (reason, promise) => {
    console.log(
      `üö® | [Unhandled Rejection] Raz√£o: ${reason}\nPromessa: ${promise}`
    );
    // Loga o erro no console e impede o crash
    if (reason instanceof Error) {
      console.error(reason.stack || reason);
    } else {
      console.error(reason);
    }

    // Tratamento espec√≠fico para Unknown Interaction
    if (reason?.code === 10062) {
      console.warn(
        "‚ö†Ô∏è | [Unknown Interaction] Intera√ß√£o desconhecida ignorada."
      );
    }
  });

  // Trata exce√ß√µes n√£o capturadas
  process.on("uncaughtException", (error, origin) => {
    console.log(
      `üö® | [Uncaught Exception] Erro: ${error.message}\nOrigem: ${origin}`
    );
    console.error(error.stack || error);
    // Opcional: Reinicia o bot de forma segura (n√£o recomendado para todos os casos)
  });

  // Mo nitora exce√ß√µes n√£o capturadas
  process.on("uncaughtExceptionMonitor", (error, origin) => {
    console.log(
      `üö® | [Uncaught Exception Monitor] Erro: ${error.message}\nOrigem: ${origin}`
    );
    console.error(error.stack || error);
  });

  // Trata eventos que possam causar travamentos
  process.on("warning", (warning) => {
    console.warn(`‚ö†Ô∏è | [Warning] Aviso: ${warning.message}`);
    console.warn(warning.stack || warning);
  });

  process.on("unhandledRejection", (reason, promise) => {
    if (reason instanceof Error) {
      // Ignora erro de mensagem desconhecida (c√≥digo 10008)
      if (reason.code === 10008) {
        console.warn(
          "‚ö†Ô∏è | [Mensagem Desconhecida] Tentativa de deletar uma mensagem inexistente. Ignorando o erro."
        );
        return;
      }
      console.error(reason.stack || reason);
    } else {
      console.error(reason);
    }
  });

  console.log("‚úÖ | Sistema de anticrash ativo.");

  // Evento para capturar intera√ß√µes desconhecidas diretamente
  client.on("interactionCreate", async (interaction) => {
    try {
      if (!interaction.isCommand() && !interaction.isModalSubmit()) return;
      // Processa a intera√ß√£o normalmente
      // Exemplo: await interaction.reply('Intera√ß√£o processada com sucesso!');
    } catch (error) {
      if (error.code === 10062) {
        console.warn(
          "‚ö†Ô∏è | [Unknown Interaction] Intera√ß√£o desconhecida ignorada no processamento."
        );
      } else {
        console.error(
          "üö® | [Interaction Error] Erro ao processar intera√ß√£o:",
          error
        );
      }
    }
  });
};
